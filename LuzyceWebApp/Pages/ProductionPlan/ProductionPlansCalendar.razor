@using System.Globalization

<style>
    .table {
        border-collapse: collapse;
        width: 100%;
    }

    .table th, .table td {
        border: 1px solid lightgray;
        padding: 1px;
        position: relative;
        text-align: left;
        vertical-align: top;
        white-space: nowrap;
    }

    .current-day {
        border: 3px solid black !important;
    }

    .day-container {
        display: flex;
        align-items: center;
    }

    .day-number {
        z-index: 100;
        font-weight: bolder;
        width: 50px;
        display: block;
        position: absolute;
        text-align: center;
        top: 1px;
        left: calc(50% - 25px);
        font-size: 40px;
    }

    .grid-container {
        display: grid;
        position: relative;
        grid-template-columns: repeat(3, 1fr);
        min-width: 100%;
        gap: 0;
        padding: 0;
        z-index: 200;
    }

    .grid-item {
        border: 1px solid black;
        display: block;
        height: 20px;
        min-width: 33%;
        margin: 0;
        opacity: 0.8;
    }

    .status-planned {
        background-color: green;
    }
    
    .status-inprogress {
        background-color: red;
    }
    
</style>

<div class="d-flex justify-content-between mb-3">
    <button class="btn btn-primary" @onclick="PreviousMonth">Poprzedni Miesiąc</button>
    <h3>@CurrentDate.ToString("MMMM yyyy", new CultureInfo("pl-PL"))</h3>
    <button class="btn btn-primary" @onclick="NextMonth">Przyszły Miesiąc</button>
</div>

<table class="table">
    <thead>
    <tr>
        <th scope="col">P</th>
        <th scope="col">W</th>
        <th scope="col">Ś</th>
        <th scope="col">C</th>
        <th scope="col">P</th>
        <th scope="col">S</th>
        <th scope="col">N</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var week in DaysOfMonth!.GroupBy(d => CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(d, CalendarWeekRule.FirstDay, DayOfWeek.Monday)))
    {
        <tr>
            @for (int i = 1; i <= 7; i++)
            {
                var day = week.FirstOrDefault(d => (int)d.DayOfWeek == i % 7);

                if (day != default)
                {
                    var isCurrentDay = day.Date == DateTime.Now.Date;
                    <td class="@(isCurrentDay ? "current-day" : "")">
                        <div class="day-number">@day.Day</div>
                        <div class="day-container">
                            <div class="grid-container">
                                @for (int j = 0; j < 9; j++)
                                {
                                    <div class="grid-item">&nbsp;</div>
                                }
                            </div>
                        </div>
                    </td>
                }
                else
                {
                    <td>&nbsp;</td>
                }
            }
        </tr>
    }
    </tbody>
</table>

@code {
    private List<DateTime>? DaysOfMonth { get; set; }
    private DateTime CurrentDate { get; set; } = DateTime.Now;

    protected override void OnInitialized()
    {
        UpdateDaysOfMonth();
    }

    private void UpdateDaysOfMonth()
    {
        DaysOfMonth = GetDaysOfMonth(CurrentDate.Year, CurrentDate.Month);
    }

    private static List<DateTime> GetDaysOfMonth(int year, int month)
    {
        var days = new List<DateTime>();
        var daysInMonth = DateTime.DaysInMonth(year, month);

        for (var day = 1; day <= daysInMonth; day++)
        {
            days.Add(new DateTime(year, month, day));
        }

        return days;
    }

    private void PreviousMonth()
    {
        CurrentDate = CurrentDate.AddMonths(-1);
        UpdateDaysOfMonth();
    }

    private void NextMonth()
    {
        CurrentDate = CurrentDate.AddMonths(1);
        UpdateDaysOfMonth();
    }
}
