@page "/productionOrder/edit/{prodOrderId:int}"
@using Luzyce.Core.Models.Order
@using Luzyce.Core.Models.ProductionOrder
@using LuzyceWebApp.Services
@using Append.Blazor.Printing
@inject IPrintingService PrintingService
@inject NavigationManager NavManager
@inject ProductionOrderService ProductionOrderService
@inject OrderService OrderService

@if (prodOrder == null)
{
    <p>
        <em>Loading...</em>
    </p>
    return;
}

<h2>Edycja Zlecenia Produkcyjnego: @prodOrder!.Number</h2>
<form @onsubmit="HandleSubmit">
    <table class="table">
        <thead>
        <tr>
            <th>Towar</th>
            <th>Na zam.</th>
            <th>Na mag.</th>
            <th>Ilość</th>
            <th>Ilość zmian</th>
            <th>Ilość na zmianę</th>
            <th>Data wykonania</th>
            <th>Ilość wykonana</th>
            <th>Uwagi</th>
            <th>Sposób pakowania</th>
            <th>Po ile pakowane</th>
        </tr>
        </thead>
        @foreach (var position in prodOrder.Positions!)
        {
            <tr>
                <td>
                    @position.Lampshade.Code @position.LampshadeNorm.Variant.Name @position.LampshadeDekor
                </td>
                <td class="div" style="text-align: right;">
                    @position.QuantityGross @position.Unit
                </td>
                <td class="div" style="text-align: right;">
                    <a type="button" class="btn" @onclick="() => quantitiesInStockComponent.ShowStockModal(productWarehousesStocks[prodOrder.Positions.IndexOf(position)], unit)">@productWarehousesStocks[prodOrder.Positions.IndexOf(position)].Quantity @position.Unit</a>
                </td>
                <td>
                    <input type="number" class="form-control form-small" @bind="position.QuantityNetto">
                </td>
                <td>
                    <input type="number" class="form-control form-small" @bind="position.NumberOfChanges">
                </td>
                <td>
                    <input type="number" class="form-control form-small" value="@position.LampshadeNorm.QuantityPerChange" @oninput="@(e => UpdateQuantityPerChange(position.LampshadeNorm.Id, e.Value!.ToString()!))">
                </td>
                <td>
                    <input type="date" class="form-control form-small" @bind="position.ExecutionDate">
                </td>
                <td>
                    <input type="number" class="form-control form-small" @bind="position.QuantityMade">
                </td>
                <td>
                    <input type="text" class="form-control form-small" @bind="position.Remarks">
                </td>
                <td>
                    <input type="text" class="form-control form-small" @bind="position.MethodOfPackaging">
                </td>
                <td>
                    <input type="number" class="form-control form-small" @bind="position.QuantityPerPack">
                </td>
            </tr>
        }
    </table>
    <button type="submit" class="btn btn-primary">Zapisz</button>
    <button type="button" class="btn btn-secondary" @onclick="@(()=> PrintingService.Print("http://localhost:5132/api/productionOrder/zlecenieProdukcji-" + prodOrder.Id + ".pdf"))">
        Wydrukuj
    </button>
</form>

<QuantitiesInStock @ref="quantitiesInStockComponent" />

@code {
    [Parameter] public int prodOrderId { get; set; }

    private GetProductionOrder? prodOrder;
    private List<ProductWarehouseStocks> productWarehousesStocks = [];
    private QuantitiesInStock quantitiesInStockComponent;
    private const string unit = "szt.";

    protected override async Task OnInitializedAsync()
    {
        if (prodOrderId < 1)
        {
            NavManager.NavigateTo("/productionOrders");
            return;
        }

        prodOrder = await ProductionOrderService.GetProductionOrder(prodOrderId);
        if (prodOrder != null)
        {
            await LoadWarehouseQuantities();
        }
    }

    private async Task HandleSubmit()
    {
        if (prodOrder == null)
        {
            return;
        }

        var updateProductionOrder = new UpdateProductionOrder
        {
            Positions = prodOrder.Positions!.Select(position => new UpdateProductionOrderPosition
            {
                Id = position.Id,
                QuantityNetto = position.QuantityNetto,
                NumberOfChanges = position.NumberOfChanges,
                QuantityPerChange = position.LampshadeNorm.QuantityPerChange,
                ExecutionDate = position.ExecutionDate,
                QuantityMade = position.QuantityMade,
                Remarks = position.Remarks,
                MethodOfPackaging = position.MethodOfPackaging,
                QuantityPerPack = position.QuantityPerPack
            }).ToList()
        };

        var resp = await ProductionOrderService.UpdateProductionOrderAsync(prodOrderId, updateProductionOrder);

        if (resp)
        {
            NavManager.NavigateTo("/productionOrders");
        }
    }

    private async Task LoadWarehouseQuantities()
    {
        var productIds = prodOrder!.Positions!.Select(p => p.ProductId).ToList();
        var stockRequest = new StockRequest
        {
            ProductIds = productIds,
            WarehouseIds = [1, 7, 8, 9, 11, 12]
        };
        var stockResponse = await OrderService.GetStockAsync(stockRequest);
        if (stockResponse != null)
        {
            productWarehousesStocks = stockResponse.ProductWarehousesStocks;

            Console.WriteLine("productWarehousesStocks:");
            foreach (var productWarehouseStock in productWarehousesStocks)
            {
                Console.WriteLine($"ProductId: {productWarehouseStock.ProductId}, Quantity: {productWarehouseStock.Quantity}");
            }
        }
    }

    private void UpdateQuantityPerChange(int lampshadeNormId, string newValue)
    {
        if (!int.TryParse(newValue, out var newQuantityPerChange)) return;

        foreach (var position in prodOrder!.Positions!.Where(position => position.LampshadeNorm.Id == lampshadeNormId))
        {
            position.LampshadeNorm.QuantityPerChange = newQuantityPerChange;
        }
    }

}