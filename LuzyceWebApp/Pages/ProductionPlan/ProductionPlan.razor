@page "/productionPlan"
@using System.Globalization
@using Append.Blazor.Printing
@using Luzyce.Core.Models.ProductionPlan
@using Luzyce.Core.Models.User
@using LuzyceWebApp.Services
@using Microsoft.IdentityModel.Tokens
@inject ProductionPlanService ProductionPlanService
@inject NavigationManager NavigationManager
@inject IPrintingService PrintingService

@if (ShiftSupervisors == null || HeadsOfMetallurgicalTeams == null)
{
    <p>
        <em>Ładowanie...</em>
    </p>
    return;
}

@if (GetProductionPlanPositions == null || GetProductionPlanPositions.ProductionPlanPositions.IsNullOrEmpty())
{
    <h3>Brak pozycji w planie produkcji</h3>
    <a class="btn btn-primary" href="/productionPriority/new?date=@Date&shift=@Shift&team=@Team" role="button">Dodaj pozycje</a>
    return;
}

<h3>@DateString Zmiana: @Shift Zespół: @Team</h3>

<div class="w-25 p-3 row">
    <div class="col">
        <label>Hutmistrz:</label>
        <select class="form-control" @bind="ShiftSupervisorId">
            <option value="" selected="selected">&nbsp;</option>
            @foreach (var shiftSupervisor in ShiftSupervisors)
            {
                <option value="@shiftSupervisor.Id">@shiftSupervisor.Id - @shiftSupervisor.Name</option>
            }
        </select>
    </div>
    <div class="col">
        <label>Warsztat hutnika:</label>
        <select class="form-control" @bind="HeadsOfMetallurgicalTeamsId">
            <option value="">&nbsp;</option>
            @foreach (var headsOfMetallurgicalTeams in HeadsOfMetallurgicalTeams)
            {
                <option value="@headsOfMetallurgicalTeams.Id">
                    @headsOfMetallurgicalTeams.Id - @headsOfMetallurgicalTeams.Name
                </option>
            }
        </select>
    </div>
</div>

<div id="sortable-table">
    <table class="table">
        <thead>
        <tr>
            <th scope="col">Asortyment</th>
            <th scope="col">Wersja wykonania</th>
            <th scope="col">Ilość godz</th>
            <th scope="col">Ilość szt.</th>
            <th scope="col">Waga netto</th>
            <th scope="col">Waga brutto</th>
            <th scope="col">Norma</th>
            <th scope="col" style="width: 11%">Dla firmy/mag.</th>
            <th scope="col">Uwagi</th>
            <th scope="col">Nr Kwitu</th>
            <th colspan="2">Akcje</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in GetProductionPlanPositions.ProductionPlanPositions)
        {
            <tr data-id="@item.Id" data-code="@item.DocumentPosition.Lampshade.Code" data-variant="@item.DocumentPosition.LampshadeNorm.Variant.Name">
                <td>@item.DocumentPosition.Lampshade.Code</td>
                <td>@item.DocumentPosition.LampshadeNorm.Variant.Name @item.DocumentPosition.LampshadeDekor</td>
                <td>
                    <input type="number" class="form-control" @bind="item.NumberOfHours">
                </td>
                <td>
                    <input type="number" class="form-control" @bind="item.Quantity">
                </td>
                <td>
                    <input type="number" class="form-control" @bind="item.DocumentPosition.LampshadeNorm.WeightNetto">
                </td>
                <td>
                    <input type="number" class="form-control" @bind="item.DocumentPosition.LampshadeNorm.WeightBrutto">
                </td>
                <td>
                    <input type="number" class="form-control" @bind="item.DocumentPosition.LampshadeNorm.QuantityPerChange">
                </td>
                <td>@item.DocumentPosition.Client</td>
                <td>@item.DocumentPosition.Remarks</td>
                <td>@item.Kwit?.Number</td>
                <td>
                    <button type="button" class="btn btn-primary btn-sm" @onclick="@(()=> PrintingService.Print("http://localhost:5132/api/productionPlan/kwit-" + item.Kwit.Id + ".pdf"))">
                        Wydrukuj
                    </button>
                </td>
                <td>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeletePosition(item.Id)">Usuń</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

<a class="btn btn-secondary" href="/productionPlans" role="button">Powrót</a>
<div style="float: right">
    <a class="btn btn-primary" href="/productionPriority/new?date=@Date&shift=@Shift&team=@Team" role="button">Dodaj pozycje</a>
    <a class="btn btn-primary" href="/productionPlans" role="button" @onclick="OnSave">Zapisz</a>
</div>

@code {
    [Parameter] [SupplyParameterFromQuery] public DateOnly Date { get; set; }

    [Parameter] [SupplyParameterFromQuery] public int Shift { get; set; }

    [Parameter] [SupplyParameterFromQuery] public int Team { get; set; }

    private string DateString => Date.ToString("d", new CultureInfo("pl-PL"));
    private GetProductionPlan? GetProductionPlanPositions { get; set; }
    private List<GetUserResponseDto>? ShiftSupervisors;
    private int? ShiftSupervisorId { get; set; }
    private int? HeadsOfMetallurgicalTeamsId { get; set; }
    private List<GetUserResponseDto>? HeadsOfMetallurgicalTeams { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GetProductionPlanPositions = await ProductionPlanService.GetPositionsAsync(new GetProductionPlanPositionsRequest()
        {
            Shift = Shift,
            Date = Date,
            Team = Team
        });

        ShiftSupervisorId = GetProductionPlanPositions?.Shift.ShiftSupervisor?.Id ?? null;
        HeadsOfMetallurgicalTeamsId = GetProductionPlanPositions?.HeadsOfMetallurgicalTeams?.Id ?? null;

        ShiftSupervisors = await ProductionPlanService.GetShiftSupervisorsAsync();
        HeadsOfMetallurgicalTeams = await ProductionPlanService.GetHeadsOfMetallurgicalTeamsAsync();
    }

    private async Task DeletePosition(int id)
    {
        await ProductionPlanService.DeletePositionAsync(id);
        GetProductionPlanPositions = await ProductionPlanService.GetPositionsAsync(new GetProductionPlanPositionsRequest
        {
            Shift = Shift,
            Date = Date,
            Team = Team
        });
        StateHasChanged();
    }
     
    private async Task OnSave()
    {
        var resp = await ProductionPlanService.UpdateProductionPlan(new UpdateProductionPlan
        {
            Id = GetProductionPlanPositions!.Id,
            ShiftSupervisorId = ShiftSupervisorId,
            HeadsOfMetallurgicalTeamsId = HeadsOfMetallurgicalTeamsId,
            ProductionPlanPositions = GetProductionPlanPositions!.ProductionPlanPositions
                .Select(position => new UpdateInfoInProductionPlanPosition
                {
                    Id = position.Id,
                    Quantity = position.Quantity,
                    NumberOfHours = position.NumberOfHours,
                    WeightNetto = position.DocumentPosition.LampshadeNorm.WeightNetto,
                    WeightBrutto = position.DocumentPosition.LampshadeNorm.WeightBrutto,
                    QuantityPerChange = position.DocumentPosition.LampshadeNorm.QuantityPerChange
                })
                .ToList()
        });
        
        if (resp)
        {
            NavigationManager.NavigateTo("/productionPlans");
        }
    }
}