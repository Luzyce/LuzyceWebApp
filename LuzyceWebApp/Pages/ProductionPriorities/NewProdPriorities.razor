@page "/productionPriority/new"
@using Luzyce.Core.Models.ProductionOrder
@using Luzyce.Core.Models.ProductionPriority
@using LuzyceWebApp.Services
@inject ProdPrioritiesService ProdPrioritiesService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@if (getOrdersPositionsResponse == null)
{
    <p>
        <em>Loading...</em>
    </p>
    return;
}

<style>
    .highlighted td {
        background-color: #FFCCCE;
    }
</style>

<div id="sortable-table">
    <table class="table">
        <thead>
        <tr>
            <th scope="col">Klosz/wersja</th>
            <th scope="col">ilość</th>
            <th scope="col">ilość na wzm</th>
            <th scope="col">wzm</th>
            <th scope="col">nr zlecenia</th>
            <th scope="col">Klient</th>
            <th scope="col">Uwagi</th>
            <th scope="col">Dodaj</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in getOrdersPositionsResponse.OrdersPositions)
        {
            <tr data-id="@item.Id" data-code="@item.Lampshade.Code" data-variant="@item.LampshadeNorm.Variant.Name">
                <td>@item.Lampshade.Code @item.LampshadeNorm.Variant.Name @item.LampshadeDekor</td>
                <td>@item.QuantityNetto</td>
                <td>@item.LampshadeNorm.QuantityPerChange</td>
                <td>@item.NumberOfChanges</td>
                <td>@item.ProductionOrderNumber</td>
                <td>@item.Client</td>
                <td>@item.Remarks</td>
                @* <td class="add-number"><input type="number" class="form-control narrow-input" min="0"/></td> *@
                @* <td class="add-btn"><a class="btn btn-primary btn-sm" href="/productionPlans" role="button">+</a></td> *@
                <td style="width: 80px">
                    <input type="number" class="form-control form-control-sm" min="0"></td>
            </tr>
        }
        </tbody>
    </table>
</div>

<button class="btn btn-primary" style="float: right" @onclick="OnSave">Zapisz</button>
<button class="btn btn-primary" style="float: right" @onclick="OnSave">Dodaj pozycje do planu prod</button>

<script>
    window.initializeSortable = (dotNetHelper) => {
        const tableBody = document.querySelector('#sortable-table tbody');
        if (tableBody) {
            new Sortable(tableBody, {
                animation: 150,
                onEnd: (evt) => {
                    dotNetHelper.invokeMethodAsync('SortList', [...evt.to.rows].map(row => parseInt(row.dataset.id)));
                }
            });

            tableBody.addEventListener('mouseover', (event) => {
                if (event.target.tagName === 'TD') {
                    const tr = event.target.closest('tr');
                    if (tr) {
                        const code = tr.dataset.code;
                        const variant = tr.dataset.variant;
                        document.querySelectorAll('#sortable-table tbody tr').forEach(row => {
                            if (row.dataset.code === code && row.dataset.variant === variant) {
                                row.classList.add('highlighted');
                            }
                        });
                    }
                }
            });

            tableBody.addEventListener('mouseout', (event) => {
                if (event.target.tagName === 'TD') {
                    const tr = event.target.closest('tr');
                    if (tr) {
                        const code = tr.dataset.code;
                        const variant = tr.dataset.variant;
                        document.querySelectorAll('#sortable-table tbody tr').forEach(row => {
                            if (row.dataset.code === code && row.dataset.variant === variant) {
                                row.classList.remove('highlighted');
                            }
                        });
                    }
                }
            });
        }
    };
</script>

@code {
    private GetOrdersPositionsResponse? getOrdersPositionsResponse;
    private readonly SortedList<int, GetProductionOrderPosition> sortedList = new();
    
    protected override async Task OnInitializedAsync()
    {
        getOrdersPositionsResponse = await ProdPrioritiesService.GetOrdersPositions();
        for (var i = 0; i < getOrdersPositionsResponse!.OrdersPositions.Count; i++)
        {
            sortedList.Add(i * 10, getOrdersPositionsResponse.OrdersPositions[i]);
        }

        await InvokeAsync(StateHasChanged);
        await JSRuntime.InvokeVoidAsync("initializeSortable", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task SortList(int[] sortedIds)
    {
        if (getOrdersPositionsResponse == null) return;

        sortedList.Clear();

        for (var i = 0; i < sortedIds.Length; i++)
        {
            var item = getOrdersPositionsResponse.OrdersPositions.FirstOrDefault(x => x.Id == sortedIds[i]);
            if (item != null)
            {
                sortedList.Add(i * 10, item);
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSave()
    {
        var resp = await ProdPrioritiesService.SaveProductionPriority(new CreateProductionPriorityRequest
        {
            positions = sortedList.Values.ToList()
        });

        if (resp)
        {
            NavigationManager.NavigateTo("/");
        }
    }
    
}