@page "/productionOrder/new"
@using System.Text.RegularExpressions
@using System.Threading
@using Luzyce.Core.Models.Lampshade
@using Luzyce.Core.Models.Order
@using Luzyce.Core.Models.ProductionOrder
@using LuzyceWebApp.Services
@inject OrderService OrderService
@inject NavigationManager NavigationManager

@if (orders == null)
{
    <p>
        <em>Loading...</em>
    </p>
    return;
}

<h3>Nowe zlecenie produkcji</h3>
<div class="row">
    <div class="col form-group">
        <label>Nazwa klienta:</label>
        <input type="text" class="form-control" @bind="customerName" @oninput="OnCustomerNameInput" disabled="@isAnyProductionOrderPositions"/>
    </div>
    <div class="col form-group">
        <label>Data początkowa:</label>
        <input type="date" class="form-control" @bind="startDate" @oninput="OnStartDateInput" disabled="@isAnyProductionOrderPositions"/>
    </div>
    <div class="col form-group">
        <label>Data końcowa:</label>
        <input type="date" class="form-control" @bind="endDate" @oninput="OnEndDateInput" disabled="@isAnyProductionOrderPositions"/>
    </div>
</div>
<br>
<div class="row">
    <div class="col-md-4">
        <ul class="list-group">
            @foreach (var order in orders!.Orders)
            {
                <li class="list-group-item order-row @(order.Id == selectedOrderId ? "selected" : "")"
                    id="order(@order.Id)"
                    @onclick="@(isAnyProductionOrderPositions ? () => { } : () => SelectOrder(order.Id))"
                    style="cursor: @(isAnyProductionOrderPositions ? "not-allowed" : "pointer")">
                    @order.Number - @order.Date.ToString("dd.MM.yyyy")
                    <br>
                    <span style="font-size: 0.7em;">@order.CustomerName</span>
                </li>
            }
        </ul>

        <br>
        <nav aria-label="Page navigation">
            <ul class="pagination" id="orderer">
                <li class="page-item @(orders.CurrentPage < 2 || isAnyProductionOrderPositions ? "disabled" : "")">
                    <a class="page-link" @onclick="@(async () => await LoadOrders(orders.CurrentPage - 1))">Poprzedni</a>
                </li>
                @for (var i = orders.CurrentPage - 2; i <= orders.CurrentPage + 2; i++)
                {
                    if (i < 1 || i > orders.TotalPages)
                    {
                        continue;
                    }

                    var pageIndex = i;
                    <li class="page-item @(orders.CurrentPage == pageIndex ? "active" : "") @(isAnyProductionOrderPositions ? "disabled" : "")">
                        <a class="page-link" @onclick="@(async () => await LoadOrders(pageIndex))">@pageIndex</a>
                    </li>
                }
                <li class="page-item @(orders.CurrentPage > orders.TotalPages - 1 || isAnyProductionOrderPositions ? "disabled" : "")">
                    <a class="page-link" @onclick="@(async () => await LoadOrders(orders.CurrentPage + 1))">Kolejny</a>
                </li>
            </ul>
        </nav>
    </div>
    <div class="col-md-8">
        @if (selectedOrder != null)
        {
            <h3>Pozycje dla @selectedOrder.Number</h3>
            <table class="table">
                <thead>
                <tr>
                    <th>Towar</th>
                    <th>Klosz</th>
                    <th>Wariant</th>
                    <th>Dekor</th>
                    <th>Ilość</th>
                    <th>Ilość w magazynie</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var position in selectedOrder.Positions)
                {
                var (klosz, lastMatchingVariantId, dekor) = GetMatchingVariantInfo(position.Symbol);
                variantIds[position.Id] = lastMatchingVariantId ?? 0;
                dekors[position.Id] = dekor;

                <tr>
                    <td>@position.Symbol @position.ProductName</td>
                    <td>
                        <input type="text" class="form-control symbol-input"
                               value="@klosz"
                               @oninput="(e) => OnKloszChanged(position.Id, e)" />
                    </td>
                    <td>
                        <select class="form-control wariant-input"
                                value="@variantIds[position.Id]"
                                @onchange="(e) => OnVariantChanged(position.Id, e)">
                            <option value="" disabled selected></option>
                            @foreach (var variant in variants!.Variants)
                            {
                            <option value="@variant.Id">@variant.Name</option>
                            }
                        </select>
                    </td>
                    <td>
                        <input type="text" class="form-control symbol-input"
                               value="@dekors[position.Id]"
                               @oninput="(e) => OnDekorChanged(position.Id, e)" />
                    </td>
                    <td>@($"{position.Quantity:0}") @position.Unit</td>
                    <td>
                        @if (position.OrderPositionLp != null && position.OrderPositionLp.Value - 1 >= 0 && position.OrderPositionLp.Value - 1 < productWarehousesStocks.Count)
                        {
                            @productWarehousesStocks[position.OrderPositionLp.Value - 1].Quantity
                        }
                    </td>
                    <td>
                        <input type="number" class="form-control narrow-input" min="0"
                               value="@ProductionOrderPositions.GetValueOrDefault(position.Id, 0)"
                               @oninput="(e) => OnQuantityInput(position.Id, e)"/>
                    </td>
                </tr>
                }
                </tbody>
            </table>
        }
        <div class="btn-right">
            <button class="btn btn-secondary" @onclick="OnReset" disabled="@(!isAnyProductionOrderPositions)">Zresetuj</button>
            <button class="btn btn-primary" @onclick="OnSave" disabled="@(!isAnyProductionOrderPositions)">Zapisz</button>
        </div>
    </div>
</div>

@code {
    private GetOrdersResponseDto? orders;
    private GetOrderResponseDto? selectedOrder;
    private string customerName = "";
    private int selectedOrderId;
    private DateTime? startDate;
    private DateTime? endDate;
    private readonly Dictionary<int, int> ProductionOrderPositions = new Dictionary<int, int>();
    private bool isAnyProductionOrderPositions;
    private CreateProductionOrderRequest? productionOrderDto;
    private GetVariantsResponseDto? variants;
    private Dictionary<int, int> variantIds = new();
    private Dictionary<int, string> dekors = new();
    private List<ProductWarehouseStocks> productWarehousesStocks = [];
    
    private CancellationTokenSource cts = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders(1);
        variants = await OrderService.GetVariantsAsync();
    }

    private async Task SelectOrder(int orderId)
    {
        selectedOrderId = orderId;
        selectedOrder = orders?.Orders.FirstOrDefault(o => o.Id == orderId);
        if (selectedOrder != null)
        {
            await LoadWarehouseQuantities(selectedOrder);
        }
        StateHasChanged();
    }

    private async Task LoadOrders(int pageNumber)
    {
        await cts.CancelAsync();
        cts = new CancellationTokenSource();
        var token = cts.Token;

        try
        {
            var getOrdersDto = new GetOrdersDto
            {
                CustomerName = customerName,
                StartDate = startDate,
                EndDate = endDate
            };
            orders = await OrderService.GetOrdersAsync(pageNumber, getOrdersDto, token);
            selectedOrder = null;
            StateHasChanged();
        }
        catch (OperationCanceledException)
        {
        }
    }

    private async Task LoadWarehouseQuantities(GetOrderResponseDto order)
    {
        var productIds = order.Positions.Select(p => p.ProductId).ToList();
        var stockRequest = new StockRequest
        {
            ProductIds = productIds,
            WarehouseIds = [1, 7, 8, 9, 11, 12]
        };
        var stockResponse = await OrderService.GetStockAsync(stockRequest);
        if (stockResponse != null)
        {
            productWarehousesStocks = stockResponse.ProductWarehousesStocks;

            Console.WriteLine("productWarehousesStocks:");
            foreach (var productWarehouseStock in productWarehousesStocks)
            {
                Console.WriteLine($"ProductId: {productWarehouseStock.ProductId}, Quantity: {productWarehouseStock.Quantity}");
            }
        }
    }

    private async Task OnCustomerNameInput(ChangeEventArgs e)
    {
        customerName = e.Value?.ToString() ?? "";
        await LoadOrders(pageNumber: 1);
    }

    private async Task OnStartDateInput(ChangeEventArgs e)
    {
        startDate = DateTime.Parse(e.Value?.ToString() ?? "");
        await LoadOrders(pageNumber: 1);
    }

    private async Task OnEndDateInput(ChangeEventArgs e)
    {
        endDate = DateTime.Parse(e.Value?.ToString() ?? "");
        await LoadOrders(pageNumber: 1);
    }

    private void OnQuantityInput(int positionId, ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value?.ToString()))
        {
            return;
        }

        var isValid = int.TryParse(e.Value?.ToString(), out var newQuantity);

        if (isValid && newQuantity >= 0)
        {
            if (newQuantity != 0)
            {
                ProductionOrderPositions[positionId] = newQuantity;
            }
            else
            {
                ProductionOrderPositions.Remove(positionId);
            }
        }

        isAnyProductionOrderPositions = ProductionOrderPositions.Values.Any(quantity => quantity != 0);

        Console.WriteLine("ProductionOrderPositions:");
        foreach (var position in ProductionOrderPositions)
        {
            Console.WriteLine($"PositionId: {position.Key}, Quantity: {position.Value}");
        }

        StateHasChanged();
    }

    private Task OnReset()
    {
        ProductionOrderPositions.Clear();

        foreach (var position in selectedOrder?.Positions ?? Enumerable.Empty<GetOrderPositionResponseDto>())
        {
            ProductionOrderPositions[position.Id] = 0;
        }

        isAnyProductionOrderPositions = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnSave()
    {
        productionOrderDto = new CreateProductionOrderRequest
        {
            Order = selectedOrder!,
            ProductionOrderPositions = selectedOrder!.Positions
                .Where(position => ProductionOrderPositions.ContainsKey(position.Id))
                .Select(position => new CreateProductionOrder
                {
                    DocumentPositionId = position.Id,
                    Symbol = Regex.Match(position.Symbol, @"^[A-Z]{2}\d{4}").Value,
                    VariantId = variantIds[position.Id],
                    Dekor = dekors[position.Id],
                    Gross = (int)position.Quantity,
                    Net = ProductionOrderPositions[position.Id]
                })
                .ToList()
        };

        if (await OrderService.CreateOrderAsync(productionOrderDto))
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Console.WriteLine("Error");
        }
    }
    
    private (string klosz, int? lastMatchingVariantId, string dekor) GetMatchingVariantInfo(string symbol)
    {
        var regexMatch = Regex.Match(symbol, @"^[A-Z]{2}\-?\d[^\-\/\ ]{2,}");
        var klosz = regexMatch.Value;
        int? lastMatchingVariantId = null;
        string? dekor = null;

        if (regexMatch.Success)
        {
            lastMatchingVariantId = variants!.Variants
                .Where(variant => symbol.Contains(variant.ShortName))
                .Select(variant => variant.Id)
                .LastOrDefault();
        
            if (lastMatchingVariantId != null)
            {
                var matchingVariant = variants.Variants
                    .FirstOrDefault(v => v.Id == lastMatchingVariantId);

                if (matchingVariant != null)
                {
                    dekor = symbol.Replace($"{klosz}-{matchingVariant.ShortName}", "").TrimStart('-');
                }
            }
        }

        if (dekor == klosz)
        {
            dekor = string.Empty;
        }

        return (klosz, lastMatchingVariantId, dekor ?? string.Empty);
    }
    
    private void OnKloszChanged(int positionId, ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? "";
        StateHasChanged();
    }

    private void OnVariantChanged(int positionId, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newVariantId))
        {
            variantIds[positionId] = newVariantId;
        }
        StateHasChanged();
    }

    private void OnDekorChanged(int positionId, ChangeEventArgs e)
    {
        var newDekor = e.Value?.ToString() ?? "";
        dekors[positionId] = newDekor;
        StateHasChanged();
    }
}
